#!/usr/bin/python
import requests
import urllib.parse
import json
import subprocess

import argparse
parser = argparse.ArgumentParser()
parser.add_argument("search_string")
parser.add_argument('-c', action='store_true')
args = parser.parse_args()

search_query = args.search_string
uri_query = urllib.parse.quote(search_query)

url = "https://www.youtube.com/results?search_query="+uri_query
search_html = requests.get(url).text

results = []
start = (
    search_html.index("ytInitialData")
    + len("ytInitialData")
    + 3
)
end = search_html.index("};", start) + 1
json_str = search_html[start:end]
data = json.loads(json_str)

# f = open('json_data_contents.txt', 'w', encoding="utf-8")
# f.write(json_str)
# f.close()

data_2 = data["contents"]["twoColumnSearchResultsRenderer"]["primaryContents"]["sectionListRenderer"]["contents"]

itemSectionRenderer_no = 0
if len(data_2) > 2:
    itemSectionRenderer_no = 1


#for video in data["contents"]["twoColumnSearchResultsRenderer"]["primaryContents"]["sectionListRenderer"]["contents"][0]["itemSectionRenderer"]["contents"]:
for video in data_2[itemSectionRenderer_no]["itemSectionRenderer"]["contents"]:
    res = {}
    res = {}
    if "videoRenderer" in video.keys():
        video_data = video.get("videoRenderer", {})
        res["id"] = video_data.get("videoId", None)
        #res["thumbnails"] = [thumb.get("url", None) for thumb in video_data.get("thumbnail", {}).get("thumbnails", [{}]) ]
        res["title"] = video_data.get("title", {}).get("runs", [[{}]])[0].get("text", None)
        #res["long_desc"] = video_data.get("descriptionSnippet", {}).get("runs", [{}])[0].get("text", None)
        res["channel"] = video_data.get("longBylineText", {}).get("runs", [[{}]])[0].get("text", None)
        #res["duration"] = video_data.get("lengthText", {}).get("simpleText", 0)
        #res["views"] = video_data.get("viewCountText", {}).get("simpleText", 0)
        #res["publish_time"] = video_data.get("publishedTimeText", {}).get("simpleText", 0)
        res["url_suffix"] = video_data.get("navigationEndpoint", {}).get("commandMetadata", {}).get("webCommandMetadata", {}).get("url", None)
        results.append(res)

longest_title_length = 0
longest_chan_length = 0

for result in results:
    title_len = len(result["title"])
    chan_len = len(result["channel"])
    if(title_len > longest_title_length):
        longest_title_length = title_len
    if(chan_len > longest_chan_length):
        longest_chan_length = chan_len

result_urls = []

def cleanURL(dirty_url):
    ampersand_pos = dirty_url.find("&")
    if(ampersand_pos > 0):
        return dirty_url[:ampersand_pos]
    else:
        return dirty_url

def print_short():
    print('\033[1;32;40m{:<4} {:<{}} {:>0}\033[0;31m'.format('No.', 'Title', longest_title_length + 5, 'URL'))
    x = 1
    for result in results:
        url_suffix = cleanURL(result["url_suffix"])

        print('{:<4} {:<{}} {:>0}'.format(x, result["title"], longest_title_length + 5, 'https://youtube.com'+url_suffix))
        result_urls.append('https://youtube.com'+url_suffix)
        x = x + 1
  

def print_long():
    print('\033[1;32;40m{:<4} {:<{}} {:<{}} {:>0}\033[0;31m'.format('No.', 'Title', longest_title_length + 5, 'Uploader', longest_chan_length + 5, 'URL'))
    x = 1
    for result in results:
        url_suffix = cleanURL(result["url_suffix"])

        print('{:<4} {:<{}} {:<{}} {:>0}'.format(x, result["title"], longest_title_length + 5, result["channel"], longest_chan_length + 5, 'https://youtube.com'+url_suffix))
        result_urls.append('https://youtube.com'+url_suffix)
        x = x + 1
      

if(args.c == True):
    print_long()
else:
    print_short()
print('\033[1;32;40m', end="")

option_no = 0
vid = False
option_no_str = input("Play no.: ")
if option_no_str[-1].lower() == 'v':
    try:
        option_no = int(option_no_str[0:-1])
    except:
        print("Invalid selection")
        exit(0)
    vid = True
else:
    try:
        option_no = int(option_no_str)
    except:
        print("Invalid selection")
        exit(0)
if((option_no <= len(result_urls) and option_no > 0) == False):
    print("Invalid selection")
    exit(0)
# print(result_urls[option_no - 1])

if vid == False:
    subprocess.run(["mpv", "--no-ytdl", "--ytdl-format=ba", result_urls[option_no - 1]])
else:
    subprocess.run(["mpv", "--no-ytdl", result_urls[option_no - 1]])
